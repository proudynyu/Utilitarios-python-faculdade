# -*- coding: utf-8 -*-
"""Exercicios_tf_GTD.ipynb

Automatically generated by Colaboratory.

# Impedância caracteristica
"""

import cmath
import math

def resolve(r, l, c, g, comp, f):
  PI = 3.14
  first = complex( r * comp, 2 * PI * f * l * comp )
  second = complex( g * comp, 2 * PI * f * c  * comp )
  result = cmath.sqrt( first // second )
  return result

R = 0.025
L = 0.854 * pow(10,-3) # mili
C = 13.65 * pow(10, -9) # nano
G = 0.0375 * pow(10, -6) # micro
freq = 60
comp = 294.84
V = 500

print(f'Resistance: {R}')
print(f'Impedance: {L}')
print(f'Capacitance: {C}')
print(f'Conductance: {G}')
print(f'Frequency: {freq}')
print(f'Length: {comp}')
print(f'Voltage: {V}')

result = resolve(R, L, C, G, comp, freq)
print(f'Result is: {result}')

"""# Tensão de transmissão"""

Vg = 17 * pow(10, 3) # kV/fase
defasado = 120 # graus
freq = 60
reti_pulso = 6
ang_tiristor = 1.12 # rad -> alpha

def tensaoTransmissao(vg, alpha):
  return (2.34 * vg * (1 + math.cos( ( math.pi/3 ) + alpha) ) )

result = tensaoTransmissao(Vg, ang_tiristor)
print(f'Result is: {result}')

"""# Tensão Critíca Disruptiva"""

raio = 2 # cm
dist_simetrica = 38 # cm

def tensaoCritica(r, d):
  return ( 21.2 * r * math.log( d / r ) )

result = tensaoCritica(raio, dist_simetrica)
print(f'Result is: {result}')

"""# Impedância Linha de Transmissão"""

imp_cabo = 0.225
comp = 314

def impLinha(cabo, comp):
  return (cabo * comp)

result = impLinha(imp_cabo, comp)
print(f'Result is: {result}')

