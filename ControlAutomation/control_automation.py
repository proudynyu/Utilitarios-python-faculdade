# -*- coding: utf-8 -*-
"""Control_Automation.ipynb

Automatically generated by Colaboratory.

# MÃ©todo de Ziegler-Nichols

## Validate td/tp
"""

def getValidate(td, tp):
  result = td/tp
  if result > 0.1 and result < 1:
    return "Is valid"
  return "Not valid"

# Insert values
td = 1
tp = 1

# Result
validate = getValidate(td, tp)
print(validate)

"""## Tipo P"""

# KC

def p_kc(tp, td, kp):
  return (tp / (td * kp))

# ti = infinity
# t0 = "No exist"

# Insert values here 
p_tp = 1
p_td = 1
p_kp = 1

# Result
KC_P = p_kc(p_tp, p_td, p_kp)
print(f'Kc is: {KC_P}')

"""## Tipo PI"""

# KC
def pi_kc(tp, td, kp):
  return ((0.9 * tp) / (td * kp))

# ti
def pi_ti(td):
  return 3.33*td

# td = "No exist"

# Insert values
pi_tp = 1
pi_td = 1
pi_kp = 1

# Result
KC_PI = pi_kc(pi_tp, pi_td, pi_kp)
TI_PI = pi_ti(pi_td)

print(f'Kc is: {KC_PI}')
print(f'ti is: {TI_PI}')

"""## Tipo PID"""

# KC
def pid_kc(td, tp, kp):
  return ((1.2 * tp) / (td * kp))

# ti
def pid_ti(td):
  return (2*td)

# td
def pid_td(td):
  return float(td/2)

# Insert values
PID_TD = 1
PID_TP = 1
PID_KP = 1

# Result
KC_PID = pid_kc(PID_TD, PID_KP, PID_KP)
TI_PID = pid_ti(PID_TD)
TD_PID = pid_td(PID_TD)

print(f'Kc is: {KC_PID}')
print(f'ti is: {TI_PID}')
print(f'td is: {TD_PID}')

"""# ITAE Minimun Criteria (SERVO PROBLEM)

## Tipo PI
"""

# KC

def itae_pi_kc(td, tp, kc):
  return ((0.586 / kp) * (td/tp)**(-0.916))

# ti

def itae_pi_ti(td, tp):
  return float(tp / (1.03 - 0.165*(td/tp)))

# tp = "No exist"

# Insert Values
itae_pi_td = 1
itae_pi_tp = 1
itae_pi_kp = 1

# Result
KC_ITAE = itae_pi_kc(itae_pi_td, itae_pi_tp, itae_pi_kp)
TI_ITAE = itae_pi_ti(itae_pi_td, itae_pi_tp)

print(f'Kc is: {KC_ITAE}')
print(f'ti is: {TI_ITAE}')

"""## Tipo PID"""

# KC
def itae_pid_kc(td, tp, kp):
  return (0.965/kp) * (td/tp)**(-0.855)

# ti
def itae_pid_ti(td, tp):
  return ( tp / (0.796 - 0.1465*(td/tp)) )

# td
def itae_pid_td(td, tp):
  return (0.308*tp) * (td/tp)**(0.929)

# Insert values
ITAE_TD_PID = 1
ITAE_TP_PID = 1
ITAE_KP_PID = 1

# Result
KC_PID_ITAE = itae_pid_kc(ITAE_TD_PID, ITAE_TP_PID, ITAE_KP_PID)
TI_PID_ITAE = itae_pid_ti(ITAE_TD_PID, ITAE_TP_PID)
TD_PID_ITAE = itae_pid_td(ITAE_TD_PID, ITAE_TP_PID)

print(f'Kc is: {KC_PID_ITAE}')
print(f'ti is: {TI_PID_ITAE}')
print(f'td is: {TD_PID_ITAE}')

"""# ITAE Minimun Criteria (REGULATORY PROBLEM)

## Tipo PI
"""

# Kc
def reg_kc(td, tp, kp):
  return (0.859 * kp) * (td/tp)**(-0.977)

# ti
def reg_ti(td, tp):
  return (tp/0.674) * (td/tp)**0.68

# td = "No Exist"

# Insert Values
REG_TD = 1
REG_TP = 1
REG_KP = 1

# Result
KC_REG = reg_kc(REG_TD, REG_TP, REG_KP)
TI_REG = reg_ti(REG_TD, REG_TP)

print(f'Kc is: {KC_REG}')
print(f'ti is: {TI_REG}')

"""## Tipo PID"""

# Kc
def reg_pid_kc(td, tp, kp):
  return (1.357/kp) * (td/tp)**(-0.947)

# ti
def reg_pid_ti(td, ti):
  return (tp/0.842) * (td/tp)**0.738

# td
def reg_pid_td(td, tp):
  return (0.381*tp) * (td/tp)**0.995

# Insert values
REG_PID_TD = 1
REG_PID_TP = 1
REG_PID_KP = 1

# Result
KC_REG_PID = reg_pid_kc(REG_PID_TD, REG_PID_TP, REG_PID_KP)
TD_REG_PID = reg_pid_td(REG_PID_TD, REG_PID_TP)
TI_REG_PID = reg_pid_ti(REG_PID_TD, REG_PID_TP)

print(f'Kc is: {KC_REG_PID}')
print(f'ti is: {TI_REG_PID}')
print(f'td is: {TD_REG_PID}')

